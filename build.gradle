import java.nio.charset.StandardCharsets
import java.time.Year

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'fabric-loom' version '0.8-SNAPSHOT'
    id 'net.minecrell.licenser' version '0.2.1'
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = project.archive_name
group = project.maven_group

def ENV = System.getenv()
def buildNumber = "+" + (ENV.BUILD_NUMBER ? ("build." + ENV.BUILD_NUMBER) : "custom")
def buildMeta = (!ENV.TAG || ENV.TAG.endsWith("-beta") || ENV.TAG.endsWith("-alpha")) ? buildNumber : ""
def modVersion = (ENV.TAG ?: "development")
version = "${modVersion}${buildMeta}-1.17"

repositories {
    maven {
        name = "OnyxStudios"
        url = "https://maven.onyxstudios.dev"
    }
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/releases"
    }
    maven {
        name = "Shedaniel"
        url = "https://maven.shedaniel.me"
    }
    mavenCentral()
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.minecraft_version}+build.${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    compileOnly "com.google.code.findbugs:jsr305:3.0.2"
    compileOnly 'org.jetbrains:annotations:22.0.0'

    modImplementation "dev.upcraft:Mesh-API:${project.mesh_version}"
    modImplementation include("dev.upcraft:Mesh:${project.mesh_version}")
    modImplementation include(fabricApi.module("fabric-resource-loader-v0", project.fabric_version))
    modImplementation include(fabricApi.module("fabric-tag-extensions-v0", project.fabric_version))
    modRuntime "com.terraformersmc:modmenu:${modmenu_version}"
    modRuntime "me.zeroeightsix:fiber:${project.fiber_version}"
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier "sources"
    from sourceSets.main.allSource
}

jar {
    from "LICENSE.md"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(remapJar)
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    repositories {
        if (ENV.MAVEN_URL && ENV.MAVEN_USER && ENV.MAVEN_PASS) {
            maven {
                url = ENV.MAVEN_URL
                credentials {
                    username = ENV.MAVEN_USER
                    password = ENV.MAVEN_PASS
                }
            }
        }
    }
}

license {
    header = project.file("code_quality/MIT_HEADER.txt")
    // Apply licenses only to main source set
    sourceSets = [project.sourceSets.main]
    include "**/*.java"
    charset = StandardCharsets.UTF_8.name()

    style {
        java = "BLOCK_COMMENT"
    }
    newLine = false // Disables the empty line between the header and package name
    //ignoreFailures = true //Ignore failures and only print a warning on license violations

    //export variables
    ext {
        year = Year.now()
        projectDisplayName = project.archivesBaseName
    }
}
